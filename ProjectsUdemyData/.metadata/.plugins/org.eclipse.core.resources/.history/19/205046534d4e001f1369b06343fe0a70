package binarysearchtree;

public class BinarySearchTree 
{
	// create the root of the binary search tree
	// not private because we won't have access to it if private
	// no constructor for this class since the root is already null
	// and we can create an empty binary search tree
	Node root;
	
	// Nested class Node
	class Node
	{
		// the value of the node
		int value;
		// pointing left which points to node with value less than the current node
		Node left;
		// pointing right which points to node with value greater than current node
		Node right;
		
		// Node constructor
		Node(int value)
		{
			// the value of the node created will be the value indicated in the argument
			this.value = value;
		}
	}
	
	// insert a node in the binary search tree
	public boolean insert(int value) 
	{
		// create the node to be added
		Node newNode = new Node(value);
		
		// if the binary search tree is empty
		if(root == null)
		{
			// then the new node created becomes the root of the binary search tree
			root = newNode;
			// return true since we successfully added a node in the binary search tree
			return true;
		}
		
		// create a pointer which will go through the binary search tree to check where to insert the new node
		Node temp = root;
		
		// loop until a return statement since the condition will never be false
		while(true)
		{
			// if the new node has the same value as another in the binary search tree
			if(newNode.value == temp.value)
			{
				// then return false since we can't add a node with the same value as another in the binary search tree
				return false;
			}
			
			// if the value of the new node is smaller than the value of temp node in the binary tree
			// then the new node will be added on the left side of that temp node
			if(newNode.value < temp.value)
			{
				// if temp node doesn't have a child node on the left
				if(temp.left == null)
				{
					// then insert the new node on the left of temp node
					temp.left = newNode;
					// return true as we succeeded to add the new node
					return true;
				}
				
				// else if there's already a node on the left of temp node
				// move pointer temp to that node and compare its value again with the new node
				temp = temp.left;
			}
			// if the value of the new node is greater than the value of temp node in the binary tree
			// then the new node will be added on the right side of that temp node
			else
			{
				// if temp node doesn't have a child node on the right
				if(temp.right == null)
				{
					// then insert the new node on the right of temp node
					temp.right = newNode;
					// return true as we succeeded to add the new node
					return true;
				}
				
				// else if there's already a node on the right of temp node
				// move pointer temp to that node and compare its value again with the new node
				temp = temp.right;
			}
		}
	}
	
	// check if the value is in the binary search tree
	public boolean contains(int value)
	{
		// create pointer temp and make it point to root
		Node temp = root;
		
		// loop until temp is null
		while(temp != null)
		{
			// if temp is pointing at a node with the value we are looking for
			if(value == temp.value)
			{
				// return true since we found the value in the binary search tree
				return true;
			}
			
			// if temp is pointing at a node with a value smaller than what we're looking for
			if(value < temp.value)
			{
				// make temp point to the left child node of the current node
				temp = temp.left;
			}
			// if temp is pointing at a node with a value greater than what we're looking for
			else 
			{
				// make temp point to the right child node of the current node
				temp = temp.right;
			}
		}
		
		// if temp is null, it means we didn't find the value we're looking for so return false
		return false;
	}
	
	// check recursively whether the binary tree contains the given value
	private boolean rContains(Node currentNode, int value)
	{
		// if the pointer currentNode is not pointing to a node in the tree
		if(currentNode == null)
		{
			// then the value we're looking for doesn't exist in the tree
			return false;
		}
		
		// if the current node's value is the same as the value we're looking for
		if(currentNode.value == value)
		{
			// then we found that the tree contains the given value
			return true;
		}
		
		// if the current node's value is smaller than the value we're looking for
		if(value < currentNode.value)
		{
			// set the pointer to the left child of the current node to check if it's the value we're looking for
			return rContains(currentNode.left, value);
		}
		// if the current node's value is larger than the value we're looking for
		else
		{
			// set the pointer to the right child of the current node to check if it's the value we're looking for
			return rContains(currentNode.right, value);
		}
	}
	
	// same method already exist but this is method overloading
	// Java will know which method to call depending on the parameters
	public boolean rContains(int value)
	{
		// run the method which takes the root of the binary tree and the value we're looking for
		return rContains(root, value);
	}
	
	// method to insert a node taking a pointer to a node and the value of the node to insert
	private Node rInsert(Node currentNode, int value)
	{
		// base case, if the pointer is pointing at an empty spot in the tree (null)
		if(currentNode == null)
		{
			// create a new node with the given value
			// return the node to the call of the method below
			// so either currentNode.left = this node or currentNode.right = this node
			return new Node(value);
		}
		
		// if the value is smaller than the value of the node that currentNode is currently pointing at
		if(value < currentNode.value)
		{
			// set the new node to the left of the node which has no left child (node returned from the currentNode is null condition)
			currentNode.left = rInsert(currentNode.left, value);
		}
		// if the value is larger than the value of the node that currentNode is currently pointing at
		else if(value > currentNode.value)
		{
			// set the new node to the right of the node which has no right child (node returned from the currentNode is null condition)
			currentNode.right = rInsert(currentNode.right, value);
		}
		
		// return the pointer to the instance of the current node 
		// if it's not pointing at the root, it will point to the next instance which would be the parent node of the current node
		return currentNode;
	}
	
	// method overloading, user will call this method to insert a node in the tree
	public void rInsert(int value)
	{
		// if the tree is empty 
		if(root == null)
		{
			// then set the new node to be the root of the tree
			root = new Node(value);
		}
		
		// call the method to insert a node depending on the value and set a pointer to the root
		rInsert(root, value);
	}
	
	private Node deleteNode(Node currentNode, int value)
	{
		// base case, if we cannot find the node to delete
		if(currentNode == null)
		{
			// then nothing to delete
			return null;
		}
		
		// if the value is smaller than the value of the node that currentNode is currently pointing at
		if(value < currentNode.value)
		{
			// check if the left child of the current node has the value we're looking for to delete
			currentNode.left = deleteNode(currentNode.left, value);
		}
		// if the value is larger than the value of the node that currentNode is currently pointing at
		else if(value > currentNode.value)
		{
			// check if the right child of the current node has the value we're looking for to delete
			currentNode.right = deleteNode(currentNode.right, value);
		}
		// if we find the value in the tree
		else
		{
			// if the node we're to delete is a leaf node (no children) 
			if(currentNode.left == null && currentNode.right == null)
			{
				// returned to the call of the method above
				// set currentNode.left = null, which basically removes the node which was the left child of the current node
				return null;
			}
			// if the node we're to delete is a node with a right child only
			else if(currentNode.left == null)
			{
				// set the pointer to the right child
				// then it will return the right child and pop out the current node from the call stack
				// then the parent of the current node will be the active instance of the call stack
				// then the right child will be set as the left child of the parent node of the current node
				// then the current node has nothing pointing to it so it will be naturally removed by the garbage collector
				currentNode = currentNode.right;
			}
			// if the node we're to delete is a node with a left child only
			else if(currentNode.right == null)
			{
				// set the pointer to the left child
				// then it will return the left child and pop out the current node from the call stack
				// then the parent of the current node will be the active instance of the call stack
				// then the left child will be set as the right child of the parent node of the current node
				// then the current node has nothing pointing to it so it will be naturally removed by the garbage collector
				currentNode = currentNode.left;
			}
			// if the current node has a right child and a left child
			else
			{
				int subTreeMin = minValue(currentNode.right);
				currentNode.value = subTreeMin;
				currentNode.right = deleteNode(currentNode.right, subTreeMin);
			}
		}
		
		// return the currentNode, pops out of the call stack 
		// then the parent node of the current node will be the active instance of the call stack
		return currentNode;
	}
	
	// helper method for delete, find the minimum value of a binary search tree
	public int minValue(Node currentNode)
	{
		// to find the node with the minimum value, we check if they have a left child (to be minimum value, there's no left child)
		while(currentNode.left != null)
		{
			// set the pointer to the left child
			currentNode = currentNode.left;
		}
		
		// return the value of the node with the minimum value
		return currentNode.value;
	}
	
	// method overloading, user will call this method to delete a node in the tree
	public void deleteNode(int value)
	{
		// delete a node with the given value, start looking for it from the root
		deleteNode(root, value);
	}
}
