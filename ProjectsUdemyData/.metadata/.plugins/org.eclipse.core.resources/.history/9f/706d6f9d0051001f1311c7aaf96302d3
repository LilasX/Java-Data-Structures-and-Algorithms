package binarysearchtree;

import java.util.*;

public class MainBinarySearchTree 
{
	// helper method to check if the method sortedArrayToBST is working properly
	private static void checkBalancedAndCorrectTraversal(int[] nums, List<Integer> expectedTraversal) 
	{
		// create an empty binary search tree
        BinarySearchTree bst = new BinarySearchTree();
        // convert the given sorted array nums to a binary search tree bst
        bst.sortedArrayToBST(nums);
        boolean isBalanced = bst.isBalanced();
        List<Integer> inorder = bst.inorderTraversal();
        
        System.out.println("Is balanced: " + isBalanced);
        System.out.println("Inorder traversal: " + inorder);
        System.out.println("Expected traversal: " + expectedTraversal);
        
        if (isBalanced && inorder.equals(expectedTraversal)) 
        {
            System.out.println("PASS: Tree is balanced and inorder traversal is correct.\n");
        } 
        else 
        {
            System.out.println("FAIL: Tree is either not balanced or inorder traversal is incorrect.\n");
        }
    }
	
	public static void main(String[] args) 
	{
//		BinarySearchTree myBST = new BinarySearchTree();
//		myBST.insert(47);
//		myBST.insert(21);
//		myBST.insert(76);
//		myBST.insert(18);
//		myBST.insert(52);
//		myBST.insert(82);
//		
//		myBST.insert(27);
//		System.out.println(myBST.root.left.right.value);
		
//		BinarySearchTree myBST = new BinarySearchTree();
//		myBST.insert(47);
//		myBST.insert(21);
//		myBST.insert(76);
//		myBST.insert(18);
//		myBST.insert(27);
//		myBST.insert(52);
//		myBST.insert(82);
//		
//		System.out.println(myBST.contains(27));
//		System.out.println(myBST.contains(17));
		
//		BinarySearchTree myBST = new BinarySearchTree();
//		myBST.insert(47);
//		myBST.insert(21);
//		myBST.insert(76);
//		myBST.insert(18);
//		myBST.insert(27);
//		myBST.insert(52);
//		myBST.insert(82);
//		
//		System.out.println(myBST.rContains(27));
//		System.out.println(myBST.rContains(17));
		
//		BinarySearchTree myBST = new BinarySearchTree();
//		myBST.insert(2);
//		myBST.insert(1);
//		myBST.insert(3);
//		
//		System.out.println("\nRoot: " + myBST.root.value);
//		System.out.println("\nRoot->Left: " + myBST.root.left.value);
//		System.out.println("\nRoot->Right: " + myBST.root.right.value);
		
//		BinarySearchTree myBST = new BinarySearchTree();
//		myBST.insert(47);
//		myBST.insert(21);
//		myBST.insert(76);
//		myBST.insert(18);
//		myBST.insert(27);
//		myBST.insert(52);
//		myBST.insert(82);
//		
//		System.out.println(myBST.minValue(myBST.root));
//		System.out.println(myBST.minValue(myBST.root.right));
		
//		BinarySearchTree myBST = new BinarySearchTree();
//		myBST.insert(2);
//		myBST.insert(1);
//		myBST.insert(3);
//		
//		System.out.println("\nRoot: " + myBST.root.value);
//		System.out.println("\nRoot->Left: " + myBST.root.left.value);
//		System.out.println("\nRoot->Right: " + myBST.root.right.value);
//		
//		myBST.deleteNode(2);
//		
//		System.out.println("\nRoot: " + myBST.root.value);
//		System.out.println("\nRoot->Left: " + myBST.root.left.value);
//		System.out.println("\nRoot->Right: " + myBST.root.right);
		
		// Test: Convert an empty array
        System.out.println("\n----- Test: Convert Empty Array -----\n");
        checkBalancedAndCorrectTraversal(new int[]{}, Arrays.asList());

        // Test: Convert an array with one element
        System.out.println("\n----- Test: Convert Single Element Array -----\n");
        checkBalancedAndCorrectTraversal(new int[]{10}, Arrays.asList(10));

        // Test: Convert a sorted array with odd number of elements
        System.out.println("\n----- Test: Convert Sorted Array with Odd Number of Elements -----\n");
        checkBalancedAndCorrectTraversal(new int[]{1, 2, 3, 4, 5}, Arrays.asList(1, 2, 3, 4, 5));

        // Test: Convert a sorted array with even number of elements
        System.out.println("\n----- Test: Convert Sorted Array with Even Number of Elements -----\n");
        checkBalancedAndCorrectTraversal(new int[]{1, 2, 3, 4, 5, 6}, Arrays.asList(1, 2, 3, 4, 5, 6));

        // Test: Convert a large sorted array
        System.out.println("\n----- Test: Convert Large Sorted Array -----\n");
        checkBalancedAndCorrectTraversal(Arrays.stream(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}).toArray(), 
        									Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15));
	}

}
