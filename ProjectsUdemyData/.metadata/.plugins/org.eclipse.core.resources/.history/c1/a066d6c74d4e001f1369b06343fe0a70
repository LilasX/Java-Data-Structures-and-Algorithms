package binarysearchtree;

public class MainBinarySearchTree 
{

	public static void main(String[] args) 
	{
//		BinarySearchTree myBST = new BinarySearchTree();
//		myBST.insert(47);
//		myBST.insert(21);
//		myBST.insert(76);
//		myBST.insert(18);
//		myBST.insert(52);
//		myBST.insert(82);
//		
//		myBST.insert(27);
//		System.out.println(myBST.root.left.right.value);
		
//		BinarySearchTree myBST = new BinarySearchTree();
//		myBST.insert(47);
//		myBST.insert(21);
//		myBST.insert(76);
//		myBST.insert(18);
//		myBST.insert(27);
//		myBST.insert(52);
//		myBST.insert(82);
//		
//		System.out.println(myBST.contains(27));
//		System.out.println(myBST.contains(17));
		
//		BinarySearchTree myBST = new BinarySearchTree();
//		myBST.insert(47);
//		myBST.insert(21);
//		myBST.insert(76);
//		myBST.insert(18);
//		myBST.insert(27);
//		myBST.insert(52);
//		myBST.insert(82);
//		
//		System.out.println(myBST.rContains(27));
//		System.out.println(myBST.rContains(17));
		
//		BinarySearchTree myBST = new BinarySearchTree();
//		myBST.insert(2);
//		myBST.insert(1);
//		myBST.insert(3);
//		
//		System.out.println("\nRoot: " + myBST.root.value);
//		System.out.println("\nRoot->Left: " + myBST.root.left.value);
//		System.out.println("\nRoot->Right: " + myBST.root.right.value);
		
//		BinarySearchTree myBST = new BinarySearchTree();
//		myBST.insert(47);
//		myBST.insert(21);
//		myBST.insert(76);
//		myBST.insert(18);
//		myBST.insert(27);
//		myBST.insert(52);
//		myBST.insert(82);
//		
//		System.out.println(myBST.minValue(myBST.root));
//		System.out.println(myBST.minValue(myBST.root.right));
		
		BinarySearchTree myBST = new BinarySearchTree();
		myBST.insert(2);
		myBST.insert(1);
		myBST.insert(3);
		
		System.out.println("\nRoot: " + myBST.root.value);
		System.out.println("\nRoot->Left: " + myBST.root.left.value);
		System.out.println("\nRoot->Right: " + myBST.root.right.value);
		
		myBST.deleteNode(2);
	}

}
